name: Build all
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  schedule:
      # Every Saturday at 2AM UTC
    - cron: "0 2 * * 6"
  pull_request:
    branches:
      - 'main'

env:
  DNF_CACHE_PATH: /var/cache/libdnf5 # F41+ and newer F40 with libdnf5
  HOST_DNF_CACHE_PATH: /tmp/libdnf5 # Any path is okay
  DNF_CACHE_PURGE_THRESHOLD_MB: 400
  FEDORA_VERSION: "41"

jobs:
  build-and-push:
    strategy:
      matrix:
        job:
          - { name: amd64, os: ubuntu-latest, pretty-name: Build and push amd64 image }
          - { name: arm64, os: ubuntu-24.04-arm, pretty-name: Build and push arm64 image }
    runs-on: ${{ matrix.job.os }}
    name: ${{ matrix.job.pretty-name }}
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token
      attestations: write

    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Podman and buildah on arm64
        if: contains( matrix.job.name , 'arm64')
        uses: awalsh128/cache-apt-pkgs-action@5902b33ae29014e6ca012c5d8025d4346556bd40 # v1.4.3
        with:
          packages: podman, buildah

      - name: Mkdir for DNF Cache
        run: mkdir -p ${{ env.HOST_DNF_CACHE_PATH }}

      - name: Restore DNF Cache
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
        with:
          path: ${{ env.HOST_DNF_CACHE_PATH }}
          key: dnf-cache-${{ matrix.job.name }}
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@c56c2d3e59e4281cc41dea2217323ba5694b171e # v3.8.0

      - name: Extract metadata for Docker (main)
        id: meta-main
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=false
          tags: |
             type=raw,value={{date 'YYYYMMDD'}}-${{ matrix.job.name }},enable={{is_default_branch}}
             type=raw,value=latest-${{ matrix.job.name }},enable={{is_default_branch}}
             type=ref,event=pr,suffix=-${{ matrix.job.name }}

      - name: Log in to ghcr.io (Using Action)
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        #if: false
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      # https://github.com/ublue-os/bluefin/blob/36c6eef3a61ebfb41edf9e4d1a4c86648c977506/.github/workflows/reusable-build.yml#L149-L153
      - name: Log in to ghcr.io (Using command) 
        if: false
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Buildah Action (main)
        id: build-image-main
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          context: fe
          containerfiles: fe/Dockerfile.${{ env.FEDORA_VERSION }}
          tags: ${{ steps.meta-main.outputs.tags }}
          oci: true
          extra-args: |
            --squash
            -v ${{ env.HOST_DNF_CACHE_PATH }}:${{ env.DNF_CACHE_PATH }}

      - name: Purge dnf5 cache if too big
        run: |
          # Folder size (KB)
          folder_size=$(du -sk ${{ env.HOST_DNF_CACHE_PATH }} | cut -f1)
          echo "Folder size: ${folder_size} KB; $(($folder_size /1024)) MB"
  
          # 100MB = 100 * 1024 KB
          threshold=$((${{ env.DNF_CACHE_PURGE_THRESHOLD_MB }} * 1024))
          echo "Threshold size: ${threshold} KB; ${{ env.DNF_CACHE_PURGE_THRESHOLD_MB }} MB"

          if [ "$folder_size" -gt "$threshold" ]; then
            echo "Threshold size exceed, purging."
            rm -rf ${{ env.HOST_DNF_CACHE_PATH }}/*
            echo '### DNF Cache purging: true' >> $GITHUB_STEP_SUMMARY
          else
            echo "Threshold size is not exceed."
            echo '### DNF Cache purging: false' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Get Date for creating cache key
        id: get-date
        shell: bash
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT

      - name: Save DNF Cache
        uses: actions/cache/save@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
        with:
          path: ${{ env.HOST_DNF_CACHE_PATH }}
          key: dnf-cache-${{ matrix.job.name }}-${{ steps.get-date.outputs.date }}

      - name: Push (main)
        id: push-main
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          image: ${{ steps.build-image-main.outputs.image }}
          tags: ${{ steps.build-image-main.outputs.tags }}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          extra-args: |
            --compression-format=zstd

      - name: Attest (main)
        uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4 # v2
        if: github.event_name != 'pull_request'
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push-main.outputs.digest }}
          push-to-registry: true

  link-container-tags:
    runs-on: ubuntu-24.04-arm
    name: Link Container tags
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token
      attestations: write
    steps:
      - name: Login ghcr.io
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest (latest)
        id: manifest-latest
        uses: Noelware/docker-manifest-action@7c492994ddff24302f28fddf722fbb1bd835e8dd
        with:
          base-image: ghcr.io/${{ github.repository }}:latest
          extra-images: |
            ghcr.io/${{ github.repository }}:latest-amd64,
            ghcr.io/${{ github.repository }}:latest-arm64
          push: true

      - name: Get Date
        id: get-date
        shell: bash
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT

      - name: Create and push manifest (time)
        id: manifest-time
        uses: Noelware/docker-manifest-action@7c492994ddff24302f28fddf722fbb1bd835e8dd
        with:
          base-image: ghcr.io/${{ github.repository }}:${{ steps.get-date.outputs.date }}
          extra-images: |
            ghcr.io/${{ github.repository }}:${{ steps.get-date.outputs.date }}-amd64,
            ghcr.io/${{ github.repository }}:${{ steps.get-date.outputs.date }}-arm64
          push: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@c56c2d3e59e4281cc41dea2217323ba5694b171e # v3.8.0

      - name: "Image:Digest -> Digest"
        id: get-digest-only
        shell: bash
        run: |
          echo "digest-latest=$(echo '${{ steps.manifest-latest.outputs.images }}' | awk -F'@' '{print $2}')" >> $GITHUB_OUTPUT
          echo "digest-time=$(echo '${{ steps.manifest-time.outputs.images }}' | awk -F'@' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Attest (Tag resign) (latest)
        uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4 # v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.get-digest-only.outputs.digest-latest }}
          push-to-registry: true

      - name: Sign the images with GitHub OIDC Token (recursive)
        env:
          IMAGES: ${{ steps.manifest-time.outputs.images }}
        run: |
          cosign sign --yes --recursive ${IMAGES}

      - name: Attest (Tag resign) (time)
        uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4 # v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.get-digest-only.outputs.digest-time }}
          push-to-registry: true

  # For PR Test Only
  # https://stackoverflow.com/questions/59077079/how-to-get-pull-request-number-within-github-actions-workflow
  link-container-tags-test:
    runs-on: ubuntu-24.04-arm
    name: Link Container tags (PR Test)
    needs: build-and-push
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Get PR number
        id: pr
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Login ghcr.io
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest (PR)
        id: manifest-time
        uses: Noelware/docker-manifest-action@7c492994ddff24302f28fddf722fbb1bd835e8dd
        with:
          base-image: ghcr.io/${{ github.repository }}:pr-${{ steps.pr.outputs.PR_NUMBER }}
          extra-images: |
            ghcr.io/${{ github.repository }}:pr-${{ steps.pr.outputs.PR_NUMBER }}-amd64,
            ghcr.io/${{ github.repository }}:pr-${{ steps.pr.outputs.PR_NUMBER }}-arm64
          push: true